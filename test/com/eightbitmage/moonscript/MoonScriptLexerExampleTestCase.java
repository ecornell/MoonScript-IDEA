package com.eightbitmage.moonscript;

import com.eightbitmage.moonscript.lang.lexer.MoonScriptFlexLexer;
import com.intellij.lexer.FlexAdapter;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.fail;

/**
 * The lexer is tested by comparing modified MoonScript lexer tokens
 * to the tokens generated by MoonScriptFlexLexer.
 *
 * 1. Place your tests in MoonScript under /resources/moon-script
 *
 * 2. Start the Ant target 'generate-tokes', which will then pass these example to the MoonScript
 * compiler and stores the generated lexer token output to /resources/moon-script
 *
 * 3. Modify the generated token file to match the plugin token stream and put the MoonScript
 * file and the token file into /resources/moon-script/tests
 *
 * @author Elijah Cornell
 * @since 0.1.0
 */
class MoonScriptLexerExampleTestCase {

  private static final String NL = System.getProperty("line.separator");
  private static final String FS = System.getProperty("file.separator");

  private enum FileType { TOKENS, MOON }

  /**
   * Assert that the MoonScript tokens matches the example tokens
   *
   * @param example The name of the example
   */
  protected void assertLexerExample(String example) {
    try {
      assertThat(getExpectedTokens(example), equalTo(getExampleTokens(example)));

    } catch (FileNotFoundException e) {
      fail("File not found: " + e.getMessage());
    } catch (IOException e) {
      fail("Cannot read file: " + e.getMessage());
    }
  }

  /**
   * Uses generated tokens from MoonScript
   *
   * @param example The example file name
   * @return the lexer tokens
   * @throws IOException when the example cannot be read
   */
  private static Collection<MoonScriptLexerTestToken> getExampleTokens(String example) throws IOException {
    ArrayList<MoonScriptLexerTestToken> tokens = new ArrayList<MoonScriptLexerTestToken>();
    StringBuffer content = readFile(example, FileType.TOKENS);

    Pattern pattern = Pattern.compile("(\\[[A-Z_]+ .*?\\](?=\\s))", Pattern.MULTILINE);
    Matcher matcher = pattern.matcher(content);

    while (matcher.find()) {
      MoonScriptLexerTestToken token = new MoonScriptLexerTestToken(content.substring(matcher.start(), matcher.end()));
      tokens.add(token);
    }

    return tokens;
  }

  /**
   * Uses the plugin to generate the lexer tokens for the given filename
   *
   * @param example The example file name
   * @return the lexer tokens
   * @throws IOException when the example cannot be read
   */
  private static Collection<MoonScriptLexerTestToken> getExpectedTokens(String example) throws IOException {

    final FlexAdapter lexer = new MoonScriptFlexLexer();
    lexer.start(readFile(example, FileType.MOON));

    ArrayList<MoonScriptLexerTestToken> tokens = new ArrayList<MoonScriptLexerTestToken>();
    while (lexer.getCurrentPosition().getOffset() < lexer.getBufferEnd()) {
      MoonScriptLexerTestToken token = new MoonScriptLexerTestToken(lexer.getTokenType(), lexer.getTokenSequence());
      tokens.add(token);
      lexer.advance();
    }

    return tokens;
  }

  /**
   * Reads the given file and returns its content as StringBuffer
   *
   * @param example The example name
   * @param type The example type
   * @return the content of the file
   * @throws IOException when the example cannot be read
   */
  private static StringBuffer readFile(String example, FileType type) throws IOException {
    BufferedReader reader = new BufferedReader(new FileReader(getExampleFilePath(example, type)));
    StringBuffer buffer = new StringBuffer();
    String line;

    while ((line = reader.readLine()) != null) {
      buffer.append(line).append(NL);
    }

    return buffer;
  }

  /**
   * Returns the path and filename to the example file for the given type
   *
   * @param example The example name
   * @param type The example type
   * @return the path and filename
   */
  private static String getExampleFilePath(String example, FileType type) {
    String filename;
    String basePath = getProjectHome() + FS + "resources" + FS + "moon-script" + FS + "tests" + FS;

    if (type == FileType.MOON) {
      filename = basePath + example + ".moon";
    } else {
      filename = basePath + example + ".tokens";
    }

    return filename;
  }

  /**
   *
   * @return the project home directory
   */
  private static String getProjectHome() {
    Properties props = System.getProperties();
    return props.getProperty("user.dir");
  }

}
