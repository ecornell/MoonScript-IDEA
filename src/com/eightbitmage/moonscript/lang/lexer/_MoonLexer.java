/* The following code was generated by JFlex 1.4.1 on 4/10/12 10:15 AM */

package com.eightbitmage.moonscript.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/10/12 10:15 AM from the specification file
 * <tt>C:/Dev/IdeaProjects/moonscript-idea/src/com/eightbitmage/moonscript/lang/lexer/moon.flex</tt>
 */
class _MoonLexer implements FlexLexer, MoonTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int XLONGSTRING_BEGIN = 2;
  public static final int XSTRINGA = 6;
  public static final int XLONGSTRING = 1;
  public static final int XSTRINGQ = 5;
  public static final int XSHORTCOMMENT = 3;
  public static final int XLONGCOMMENT = 4;
  public static final int YYNUMBER = 10;
  public static final int YYNAME = 9;
  public static final int YYINITIAL = 0;
  public static final int XINDENT = 7;
  public static final int YYNORMAL = 8;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\47\1\44\1\46"+
    "\1\0\1\53\1\0\1\45\1\55\1\56\1\52\1\10\1\62\1\16"+
    "\1\14\1\54\1\11\11\6\1\64\1\63\1\50\1\15\1\36\1\0"+
    "\1\67\4\13\1\7\1\13\21\5\1\12\2\5\1\4\1\65\1\57"+
    "\1\66\1\5\1\0\1\22\1\23\1\34\1\21\1\17\1\32\1\5"+
    "\1\41\1\31\1\5\1\25\1\27\1\43\1\20\1\26\1\40\1\5"+
    "\1\24\1\30\1\35\1\33\1\5\1\42\1\37\2\5\1\60\1\0"+
    "\1\61\1\51\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\2\1\3\2\1\3\2\4\1\5\2\6\3\7"+
    "\1\10\2\11\1\12\1\10\2\13\1\12\1\10\1\14"+
    "\1\15\2\16\1\17\2\20\1\21\1\22\1\23\1\24"+
    "\1\23\1\25\1\26\1\27\16\22\1\30\1\22\1\31"+
    "\1\32\1\33\1\34\1\35\1\11\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\25\1\51\1\52\1\53\1\54\2\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\0\1\76"+
    "\1\0\1\77\1\100\2\0\1\23\1\24\1\0\1\23"+
    "\1\101\1\102\1\34\1\27\1\103\5\22\1\104\3\22"+
    "\1\105\2\22\1\106\1\107\10\22\1\110\2\22\1\111"+
    "\1\112\1\113\1\36\1\37\1\40\1\0\2\23\1\114"+
    "\1\101\1\0\1\103\1\53\3\22\1\115\1\116\1\117"+
    "\7\22\1\120\10\22\1\121\1\122\14\22\1\123\1\124"+
    "\1\125\1\126\4\22\1\127\2\22\1\130\2\22\1\131"+
    "\1\22\1\132\1\133\1\134\1\135\1\22\1\136\1\137"+
    "\1\140\1\141\1\142\1\22\1\143\1\22\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u0268\0\u02d8\0\u0310"+
    "\0\u0268\0\u0348\0\u0268\0\u0268\0\u0380\0\u0268\0\u0268\0\u03b8"+
    "\0\u03f0\0\u0268\0\u0428\0\u0268\0\u0460\0\u0498\0\u04d0\0\u0268"+
    "\0\u0508\0\u0540\0\u0268\0\u0268\0\u0578\0\u0268\0\u05b0\0\u05e8"+
    "\0\u0268\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0268\0\u0268\0\u0b60\0\u0b98\0\u0bd0\0\u0b98\0\u0c08"+
    "\0\u0c40\0\u0c78\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0cb0\0\u0ce8"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268"+
    "\0\u0268\0\u0310\0\u0268\0\u03f0\0\u0268\0\u0268\0\u0620\0\u0d20"+
    "\0\u0d58\0\u0268\0\u0d90\0\u0dc8\0\u0e00\0\u0268\0\u0268\0\u0268"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0658\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u0658\0\u1030\0\u1068\0\u0658\0\u0658\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u0268"+
    "\0\u1260\0\u1298\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268"+
    "\0\u0dc8\0\u12d0\0\u0d90\0\u0268\0\u0268\0\u1308\0\u1340\0\u0658"+
    "\0\u1378\0\u13b0\0\u13e8\0\u0658\0\u0658\0\u0658\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u0658\0\u15a8\0\u15e0"+
    "\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u0268\0\u1768"+
    "\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928"+
    "\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u0658\0\u0658\0\u0658\0\u0658"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u0658\0\u1b20\0\u1b58\0\u0658"+
    "\0\u1b90\0\u1bc8\0\u0658\0\u1c00\0\u0658\0\u0658\0\u0658\0\u0658"+
    "\0\u1c38\0\u0658\0\u0658\0\u0658\0\u0658\0\u0658\0\u1c70\0\u0658"+
    "\0\u1ca8\0\u0658";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\14\1\15\65\14\2\16\1\17\54\16\1\20\10\16"+
    "\2\21\1\22\1\23\64\21\2\24\1\25\1\26\64\24"+
    "\2\27\1\30\54\27\1\31\10\27\2\32\1\33\1\34"+
    "\40\32\1\35\20\32\1\36\4\32\1\37\1\40\41\32"+
    "\1\41\17\32\1\42\2\32\1\43\1\44\1\45\1\46"+
    "\64\43\1\34\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\53\1\55\1\56\2\53\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\53\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\3\53"+
    "\1\101\1\53\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\3\126\1\133\3\126\1\134\1\135"+
    "\1\136\25\126\1\102\1\103\1\126\1\137\2\126\1\140"+
    "\1\141\1\142\1\143\1\144\1\145\1\126\1\146\1\147"+
    "\1\150\1\151\1\134\3\126\1\127\1\130\1\131\1\132"+
    "\3\126\1\133\3\126\1\134\1\126\1\136\30\126\1\137"+
    "\2\126\1\140\1\141\1\142\1\126\1\144\1\145\1\126"+
    "\1\146\1\147\1\126\1\151\3\126\73\0\1\14\67\0"+
    "\1\16\101\0\1\152\41\0\1\153\13\0\1\23\67\0"+
    "\1\26\67\0\1\27\101\0\1\154\41\0\1\155\13\0"+
    "\1\34\130\0\1\32\26\0\2\32\13\0\1\32\1\0"+
    "\3\32\5\0\1\32\2\0\1\32\6\0\2\32\11\0"+
    "\1\32\5\0\1\32\5\0\1\40\131\0\1\32\25\0"+
    "\2\32\13\0\1\32\1\0\3\32\5\0\1\32\2\0"+
    "\1\32\7\0\1\32\11\0\1\32\5\0\1\32\5\0"+
    "\1\46\65\0\1\47\71\0\1\51\70\0\1\156\10\0"+
    "\1\157\57\0\3\53\1\0\3\53\3\0\17\53\1\0"+
    "\5\53\32\0\1\54\1\160\1\0\1\54\2\0\1\161"+
    "\2\0\1\160\65\0\1\162\60\0\1\54\1\160\1\0"+
    "\1\54\1\163\1\0\1\161\2\0\1\160\17\0\1\163"+
    "\36\0\1\164\2\0\1\164\2\0\1\165\70\0\1\166"+
    "\20\0\1\167\46\0\1\170\1\171\17\0\1\167\36\0"+
    "\3\53\1\0\3\53\3\0\1\53\1\172\6\53\1\173"+
    "\6\53\1\0\1\174\4\53\31\0\3\53\1\0\3\53"+
    "\3\0\7\53\1\175\2\53\1\176\4\53\1\0\5\53"+
    "\31\0\3\53\1\0\3\53\3\0\7\53\1\177\7\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\1\53"+
    "\1\200\15\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\5\53\1\201\11\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\1\202\16\53\1\0\5\53\31\0"+
    "\3\53\1\0\3\53\3\0\5\53\1\203\11\53\1\0"+
    "\5\53\31\0\3\53\1\0\3\53\3\0\7\53\1\204"+
    "\7\53\1\0\5\53\31\0\3\53\1\0\3\53\3\0"+
    "\17\53\1\0\3\53\1\205\1\53\31\0\3\53\1\0"+
    "\3\53\3\0\1\53\1\206\11\53\1\207\3\53\1\0"+
    "\4\53\1\210\31\0\3\53\1\0\3\53\3\0\3\53"+
    "\1\211\3\53\1\212\4\53\1\213\2\53\1\0\5\53"+
    "\31\0\3\53\1\0\3\53\3\0\1\53\1\214\15\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\10\53"+
    "\1\215\6\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\5\53\1\216\11\53\1\0\2\53\1\217\2\53"+
    "\41\0\1\220\57\0\3\53\1\0\3\53\3\0\12\53"+
    "\1\221\4\53\1\0\2\53\1\222\2\53\73\0\1\223"+
    "\35\0\1\224\67\0\1\225\67\0\1\226\67\0\1\227"+
    "\67\0\1\230\53\0\1\127\71\0\1\131\72\0\1\164"+
    "\1\0\1\231\1\164\4\0\1\231\57\0\1\232\2\0"+
    "\1\232\64\0\2\233\1\0\1\233\1\0\1\233\3\0"+
    "\1\233\1\0\3\233\6\0\1\233\1\0\1\233\41\0"+
    "\1\164\2\0\1\164\72\0\1\234\1\235\56\0\1\236"+
    "\11\0\1\237\56\0\3\53\1\0\3\53\3\0\2\53"+
    "\1\240\14\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\11\53\1\241\5\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\16\53\1\242\1\0\1\53\1\243"+
    "\3\53\31\0\3\53\1\0\3\53\3\0\16\53\1\244"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\10\53"+
    "\1\245\6\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\2\53\1\246\14\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\1\247\16\53\1\0\5\53\31\0"+
    "\3\53\1\0\3\53\3\0\16\53\1\250\1\0\1\53"+
    "\1\251\3\53\31\0\3\53\1\0\3\53\3\0\15\53"+
    "\1\252\1\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\12\53\1\253\4\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\17\53\1\0\1\53\1\254\3\53"+
    "\31\0\3\53\1\0\3\53\3\0\10\53\1\255\6\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\5\53"+
    "\1\256\11\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\1\53\1\257\15\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\16\53\1\260\1\0\5\53\31\0"+
    "\3\53\1\0\3\53\3\0\3\53\1\261\13\53\1\0"+
    "\5\53\31\0\3\53\1\0\3\53\3\0\14\53\1\262"+
    "\2\53\1\0\5\53\31\0\3\53\1\0\3\53\3\0"+
    "\1\263\16\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\16\53\1\264\1\0\5\53\31\0\3\53\1\0"+
    "\3\53\3\0\1\265\11\53\1\266\4\53\1\0\5\53"+
    "\32\0\1\232\1\160\1\0\1\232\5\0\1\160\54\0"+
    "\1\267\10\0\1\236\70\0\1\237\56\0\3\53\1\0"+
    "\3\53\3\0\1\270\16\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\1\271\16\53\1\0\5\53\31\0"+
    "\3\53\1\0\3\53\3\0\7\53\1\272\7\53\1\0"+
    "\5\53\31\0\3\53\1\0\3\53\3\0\3\53\1\273"+
    "\13\53\1\0\5\53\31\0\3\53\1\0\3\53\3\0"+
    "\14\53\1\274\2\53\1\0\5\53\31\0\3\53\1\0"+
    "\3\53\3\0\1\275\16\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\3\53\1\276\13\53\1\0\5\53"+
    "\31\0\3\53\1\0\3\53\3\0\16\53\1\277\1\0"+
    "\5\53\31\0\3\53\1\0\3\53\3\0\7\53\1\300"+
    "\7\53\1\0\5\53\31\0\3\53\1\0\3\53\3\0"+
    "\11\53\1\301\5\53\1\0\5\53\31\0\3\53\1\0"+
    "\3\53\3\0\15\53\1\302\1\53\1\0\5\53\31\0"+
    "\3\53\1\0\3\53\3\0\12\53\1\303\4\53\1\0"+
    "\5\53\31\0\3\53\1\0\3\53\3\0\11\53\1\304"+
    "\5\53\1\0\5\53\31\0\3\53\1\0\3\53\3\0"+
    "\1\305\16\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\1\53\1\306\15\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\17\53\1\0\2\53\1\307\2\53"+
    "\31\0\3\53\1\0\3\53\3\0\1\53\1\310\15\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\10\53"+
    "\1\311\6\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\12\53\1\312\4\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\1\53\1\313\15\53\1\0\5\53"+
    "\31\0\3\53\1\0\3\53\3\0\5\53\1\314\11\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\6\53"+
    "\1\315\10\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\5\53\1\316\11\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\3\53\1\317\13\53\1\0\5\53"+
    "\31\0\3\53\1\0\3\53\3\0\10\53\1\320\6\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\15\53"+
    "\1\321\1\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\5\53\1\322\11\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\1\323\16\53\1\0\5\53\31\0"+
    "\3\53\1\0\3\53\3\0\16\53\1\324\1\0\5\53"+
    "\31\0\3\53\1\0\3\53\3\0\10\53\1\325\6\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\11\53"+
    "\1\326\5\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\1\327\16\53\1\0\5\53\31\0\3\53\1\0"+
    "\3\53\3\0\13\53\1\330\3\53\1\0\5\53\31\0"+
    "\3\53\1\0\3\53\3\0\2\53\1\331\14\53\1\0"+
    "\5\53\31\0\3\53\1\0\3\53\3\0\16\53\1\332"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\1\53"+
    "\1\333\15\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\16\53\1\334\1\0\5\53\31\0\3\53\1\0"+
    "\3\53\3\0\17\53\1\0\2\53\1\335\2\53\31\0"+
    "\3\53\1\0\3\53\3\0\16\53\1\336\1\0\5\53"+
    "\31\0\3\53\1\0\3\53\3\0\12\53\1\337\4\53"+
    "\1\0\5\53\31\0\3\53\1\0\3\53\3\0\11\53"+
    "\1\340\5\53\1\0\5\53\31\0\3\53\1\0\3\53"+
    "\3\0\7\53\1\341\7\53\1\0\5\53\31\0\3\53"+
    "\1\0\3\53\3\0\1\53\1\342\15\53\1\0\5\53"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\2\11\2\1\1\11\1\1\1\11\3\1\1\11"+
    "\2\1\2\11\1\1\1\11\2\1\1\11\30\1\2\11"+
    "\7\1\14\11\2\1\21\11\1\0\1\11\1\0\2\11"+
    "\2\0\1\1\1\11\1\0\2\1\3\11\27\1\1\11"+
    "\2\1\6\11\1\0\2\1\2\11\1\0\30\1\1\11"+
    "\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    ExtendedSyntaxStrCommentHandler longCommentOrStringHandler = new ExtendedSyntaxStrCommentHandler();
    int current_line_indent = 0;
    int indent_level = 0;


  _MoonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _MoonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { yybegin(YYNORMAL);return WRONG;
          }
        case 100: break;
        case 33: 
          { return LPAREN;
          }
        case 101: break;
        case 72: 
          { return GE;
          }
        case 102: break;
        case 42: 
          { return SELF;
          }
        case 103: break;
        case 79: 
          { return AND;
          }
        case 104: break;
        case 73: 
          { yybegin( XSHORTCOMMENT ); return SHEBANG;
          }
        case 105: break;
        case 92: 
          { return WHILE;
          }
        case 106: break;
        case 88: 
          { return LOCAL;
          }
        case 107: break;
        case 83: 
          { return TRUE;
          }
        case 108: break;
        case 2: 
          { return LONGSTRING;
          }
        case 109: break;
        case 37: 
          { return RCURLY;
          }
        case 110: break;
        case 67: 
          { yypushback(yytext().length()); yybegin( XSHORTCOMMENT ); return advance();
          }
        case 111: break;
        case 64: 
          { longCommentOrStringHandler.setCurrentExtQuoteStart(yytext().toString()); yybegin( XLONGSTRING_BEGIN ); return LONGSTRING_BEGIN;
          }
        case 112: break;
        case 93: 
          { return ELSEIF;
          }
        case 113: break;
        case 12: 
          { yypushback(1);
                   if (current_line_indent > indent_level) {
                       indent_level++;
                       yybegin(YYNORMAL);
                       return INDENT;
                   } else if (current_line_indent < indent_level) {
                       indent_level--;
                       yybegin(YYNORMAL);
                       return UNINDENT;
                   } else {
                       yybegin(YYNORMAL);
                   }
          }
        case 114: break;
        case 3: 
          { yypushback(1); yybegin(XLONGSTRING); return advance();
          }
        case 115: break;
        case 40: 
          { return COLON;
          }
        case 116: break;
        case 87: 
          { return BREAK;
          }
        case 117: break;
        case 94: 
          { return EXPORT;
          }
        case 118: break;
        case 66: 
          { return EQ;
          }
        case 119: break;
        case 96: 
          { return REPEAT;
          }
        case 120: break;
        case 61: 
          { yybegin(YYNORMAL); return COLON;
          }
        case 121: break;
        case 14: 
          { current_line_indent = 0; return NEWLINE; /*ignoring blank line */
          }
        case 122: break;
        case 36: 
          { return LCURLY;
          }
        case 123: break;
        case 99: 
          { return EXTENDS;
          }
        case 124: break;
        case 6: 
          { yybegin(YYNORMAL);  yypushback(yylength()); return NEWLINE;
          }
        case 125: break;
        case 26: 
          { yybegin(XSTRINGA); return STRING;
          }
        case 126: break;
        case 78: 
          { return NIL;
          }
        case 127: break;
        case 95: 
          { return RETURN;
          }
        case 128: break;
        case 15: 
          { return WS;
          }
        case 129: break;
        case 86: 
          { return WHEN;
          }
        case 130: break;
        case 38: 
          { return COMMA;
          }
        case 131: break;
        case 30: 
          { return MULT;
          }
        case 132: break;
        case 13: 
          { current_line_indent++; return WS;
          }
        case 133: break;
        case 31: 
          { return MOD;
          }
        case 134: break;
        case 59: 
          { yybegin(YYNORMAL); return COMMA;
          }
        case 135: break;
        case 32: 
          { return DIV;
          }
        case 136: break;
        case 63: 
          { if (longCommentOrStringHandler.isCurrentExtQuoteStart(yytext())) {
                       yybegin(YYINITIAL); longCommentOrStringHandler.resetCurrentExtQuoteStart(); return LONGCOMMENT_END;
                    }  else { yypushback(yytext().length()-1); }
                  return LONGCOMMENT;
          }
        case 137: break;
        case 20: 
          { return PLUS;
          }
        case 138: break;
        case 7: 
          { return LONGCOMMENT;
          }
        case 139: break;
        case 5: 
          { return SHORTCOMMENT;
          }
        case 140: break;
        case 29: 
          { return LT;
          }
        case 141: break;
        case 97: 
          { return SWITCH;
          }
        case 142: break;
        case 91: 
          { return CLASS;
          }
        case 143: break;
        case 57: 
          { yybegin(YYNORMAL); return RBRACK;
          }
        case 144: break;
        case 51: 
          { yybegin(YYNORMAL); return FUNCTION;
          }
        case 145: break;
        case 21: 
          { return DOT;
          }
        case 146: break;
        case 68: 
          { return DO;
          }
        case 147: break;
        case 70: 
          { return IN;
          }
        case 148: break;
        case 39: 
          { return SEMI;
          }
        case 149: break;
        case 89: 
          { return FALSE;
          }
        case 150: break;
        case 1: 
          { current_line_indent = 0; indent_level = 0; yypushback(1); yybegin(XINDENT);
          }
        case 151: break;
        case 49: 
          { yybegin(YYNORMAL); return ASSIGN;
          }
        case 152: break;
        case 24: 
          { return GT;
          }
        case 153: break;
        case 35: 
          { return RBRACK;
          }
        case 154: break;
        case 46: 
          { yybegin(YYNORMAL); return LBRACK;
          }
        case 155: break;
        case 45: 
          { yybegin(YYNORMAL); yypushback(yylength()); return NEWLINE;
          }
        case 156: break;
        case 62: 
          { if (longCommentOrStringHandler.isCurrentExtQuoteStart(yytext())) {
                       yybegin(YYNORMAL); longCommentOrStringHandler.resetCurrentExtQuoteStart(); return LONGSTRING_END;
                    } else { yypushback(yytext().length()-1); }
                    return LONGSTRING;
          }
        case 157: break;
        case 69: 
          { return OR;
          }
        case 158: break;
        case 10: 
          { yybegin(YYNORMAL); return STRING;
          }
        case 159: break;
        case 53: 
          { yybegin(YYNORMAL); return MOD;
          }
        case 160: break;
        case 19: 
          { yybegin(YYNUMBER); return NUMBER;
          }
        case 161: break;
        case 52: 
          { yybegin(YYNORMAL); return MULT;
          }
        case 162: break;
        case 65: 
          { return CONCAT;
          }
        case 163: break;
        case 22: 
          { return ASSIGN;
          }
        case 164: break;
        case 54: 
          { yybegin(YYNORMAL); return DIV;
          }
        case 165: break;
        case 17: 
          { return LBRACK;
          }
        case 166: break;
        case 76: 
          { return ELLIPSIS;
          }
        case 167: break;
        case 25: 
          { yybegin(XSTRINGQ); return STRING;
          }
        case 168: break;
        case 27: 
          { return GETN;
          }
        case 169: break;
        case 28: 
          { return FUNCTION;
          }
        case 170: break;
        case 77: 
          { return NOT;
          }
        case 171: break;
        case 56: 
          { yybegin(YYNORMAL); return RPAREN;
          }
        case 172: break;
        case 98: 
          { return IMPORT;
          }
        case 173: break;
        case 47: 
          { yybegin(YYNORMAL); return PLUS;
          }
        case 174: break;
        case 82: 
          { return ELSE;
          }
        case 175: break;
        case 18: 
          { yybegin(YYNAME); return NAME;
          }
        case 176: break;
        case 8: 
          { return STRING;
          }
        case 177: break;
        case 71: 
          { return IF;
          }
        case 178: break;
        case 85: 
          { return WITH;
          }
        case 179: break;
        case 74: 
          { return NE;
          }
        case 180: break;
        case 44: 
          { yybegin(YYNORMAL); return WS;
          }
        case 181: break;
        case 84: 
          { return THEN;
          }
        case 182: break;
        case 90: 
          { return UNTIL;
          }
        case 183: break;
        case 48: 
          { yybegin(YYNORMAL); return DOT;
          }
        case 184: break;
        case 23: 
          { return MINUS;
          }
        case 185: break;
        case 80: 
          { return FOR;
          }
        case 186: break;
        case 75: 
          { return LE;
          }
        case 187: break;
        case 4: 
          { return NL_BEFORE_LONGSTRING;
          }
        case 188: break;
        case 41: 
          { return EXP;
          }
        case 189: break;
        case 34: 
          { return RPAREN;
          }
        case 190: break;
        case 60: 
          { yybegin(YYNORMAL); return SEMI;
          }
        case 191: break;
        case 55: 
          { yybegin(YYNORMAL); return LPAREN;
          }
        case 192: break;
        case 50: 
          { yybegin(YYNORMAL); return MINUS;
          }
        case 193: break;
        case 81: 
          { longCommentOrStringHandler.setCurrentExtQuoteStart(yytext().toString()); yybegin( XLONGCOMMENT ); return LONGCOMMENT_BEGIN;
          }
        case 194: break;
        case 43: 
          { return WRONG;
          }
        case 195: break;
        case 16: 
          { current_line_indent = 0; yybegin(XINDENT); return NEWLINE;
          }
        case 196: break;
        case 58: 
          { yybegin(YYNORMAL); return RCURLY;
          }
        case 197: break;
        case 9: 
          { yybegin(YYNORMAL); return WRONG;
          }
        case 198: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
