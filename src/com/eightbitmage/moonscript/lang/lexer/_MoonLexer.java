/* The following code was generated by JFlex 1.4.3 on 12/22/11 2:57 PM */

package com.eightbitmage.moonscript.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/22/11 2:57 PM from the specification file
 * <tt>C:/Dev/IdeaProjects/moonscript-idea/src/com/eightbitmage/moonscript/lang/lexer/moon.flex</tt>
 */
class _MoonLexer implements FlexLexer, MoonTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int XLONGSTRING_BEGIN = 4;
  public static final int XSTRINGA = 12;
  public static final int XLONGSTRING = 2;
  public static final int XSTRINGQ = 10;
  public static final int XSHORTCOMMENT = 6;
  public static final int XLONGCOMMENT = 8;
  public static final int YYNUMBER = 20;
  public static final int YYNAME = 18;
  public static final int YYINITIAL = 0;
  public static final int XINDENT = 14;
  public static final int YYNORMAL = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\47\1\44\1\46"+
    "\1\0\1\53\1\0\1\45\1\55\1\56\1\52\1\10\1\62\1\16"+
    "\1\14\1\54\1\11\11\6\1\64\1\63\1\50\1\15\1\36\1\0"+
    "\1\67\4\13\1\7\1\13\21\5\1\12\2\5\1\4\1\65\1\57"+
    "\1\66\1\5\1\0\1\17\1\22\1\34\1\21\1\24\1\32\1\5"+
    "\1\40\1\31\1\5\1\25\1\27\1\43\1\20\1\26\1\37\1\5"+
    "\1\23\1\30\1\35\1\33\1\5\1\41\1\42\2\5\1\60\1\0"+
    "\1\61\1\51\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\1\12\16\5\1\13\1\5\1\14"+
    "\1\15\1\16\1\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\1\33\1\34\1\35\3\36\1\37\2\40\1\41\2\42"+
    "\3\43\1\44\2\45\1\46\1\44\2\47\1\46\1\44"+
    "\1\50\1\51\2\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\2\0\1\6\1\7\1\0\1\6\1\71\1\72"+
    "\1\73\1\12\1\74\3\5\1\75\5\5\1\76\2\5"+
    "\1\77\1\100\10\5\1\101\2\5\1\102\1\103\1\104"+
    "\1\20\1\21\1\22\1\0\1\105\1\0\1\106\1\0"+
    "\2\6\1\107\1\71\1\0\1\74\1\110\1\111\1\112"+
    "\3\5\1\113\6\5\1\114\7\5\1\115\1\0\2\116"+
    "\3\5\1\117\10\5\1\120\1\121\1\122\1\5\2\0"+
    "\1\123\4\5\1\124\2\5\1\125\1\5\1\126\1\127"+
    "\1\130\1\0\1\131\1\132\1\133\1\134\1\135\1\136"+
    "\1\5\1\0\1\5\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0268\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0268"+
    "\0\u0268\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u0268"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268"+
    "\0\u0268\0\u0268\0\u09a0\0\u0268\0\u09d8\0\u0a10\0\u0268\0\u0a48"+
    "\0\u0268\0\u0268\0\u0a80\0\u0268\0\u0268\0\u0ab8\0\u0af0\0\u0268"+
    "\0\u0b28\0\u0268\0\u0b60\0\u0b98\0\u0bd0\0\u0268\0\u0c08\0\u0c40"+
    "\0\u0268\0\u0268\0\u0c78\0\u0268\0\u0cb0\0\u0268\0\u0268\0\u0268"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268\0\u0268"+
    "\0\u0268\0\u0268\0\u0310\0\u0ce8\0\u0d20\0\u0268\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0268\0\u0268\0\u0268\0\u0e00\0\u0e38\0\u0e70\0\u0ea8"+
    "\0\u0348\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0348\0\u0ff8"+
    "\0\u1030\0\u0348\0\u0348\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u0268\0\u1228\0\u1260\0\u0268\0\u0268"+
    "\0\u0268\0\u0268\0\u0268\0\u0268\0\u0a10\0\u0268\0\u0af0\0\u0268"+
    "\0\u0d90\0\u1298\0\u0d58\0\u0268\0\u0268\0\u12d0\0\u1308\0\u0348"+
    "\0\u0348\0\u0348\0\u1340\0\u1378\0\u13b0\0\u0348\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u1500\0\u0348\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u0268\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u0348\0\u0348\0\u0348\0\u1a08"+
    "\0\u1730\0\u1a40\0\u0348\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u0348"+
    "\0\u1b58\0\u1b90\0\u0348\0\u1bc8\0\u0348\0\u0348\0\u0348\0\u1c00"+
    "\0\u0348\0\u0348\0\u0348\0\u0348\0\u0348\0\u0348\0\u1c38\0\u1c70"+
    "\0\u1ca8\0\u0348";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\21"+
    "\1\23\1\24\2\21\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\21\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\21\1\47"+
    "\2\21\1\50\1\51\1\52\1\53\1\54\1\53\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\14\1\73\1\16"+
    "\1\17\1\20\1\21\1\22\1\21\1\23\1\24\2\21"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\21\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\2\21\1\47\2\21\1\50\1\51"+
    "\1\52\1\53\1\54\1\53\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\2\74\1\75\54\74\1\76\10\74\2\77"+
    "\1\100\1\101\64\77\2\102\1\103\1\104\64\102\2\105"+
    "\1\106\54\105\1\107\10\105\2\110\1\111\1\112\40\110"+
    "\1\113\20\110\1\114\4\110\1\115\1\116\41\110\1\117"+
    "\17\110\1\120\2\110\1\121\1\122\1\123\1\124\64\121"+
    "\3\14\1\0\65\14\1\125\1\103\1\104\1\126\3\14"+
    "\1\127\3\14\1\130\1\14\1\131\30\14\1\132\2\14"+
    "\1\133\1\134\1\135\1\14\1\136\1\137\2\14\1\140"+
    "\1\14\1\141\3\14\71\0\1\15\71\0\1\17\70\0"+
    "\1\142\10\0\1\143\57\0\3\21\1\0\3\21\3\0"+
    "\17\21\1\0\5\21\32\0\1\22\1\144\1\0\1\22"+
    "\2\0\1\145\7\0\1\144\60\0\1\146\60\0\1\22"+
    "\1\144\1\0\1\22\1\147\1\0\1\145\7\0\1\144"+
    "\15\0\1\147\33\0\1\150\2\0\1\150\2\0\1\151"+
    "\70\0\1\152\20\0\1\153\46\0\1\154\1\155\17\0"+
    "\1\153\36\0\3\21\1\0\3\21\3\0\1\21\1\156"+
    "\15\21\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\7\21\1\157\2\21\1\160\4\21\1\0\5\21\31\0"+
    "\3\21\1\0\3\21\3\0\7\21\1\161\7\21\1\0"+
    "\5\21\31\0\3\21\1\0\3\21\3\0\4\21\1\162"+
    "\12\21\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\5\21\1\163\11\21\1\0\5\21\31\0\3\21\1\0"+
    "\3\21\3\0\1\21\1\164\6\21\1\165\6\21\1\0"+
    "\3\21\1\166\1\21\31\0\3\21\1\0\3\21\3\0"+
    "\4\21\1\167\12\21\1\0\5\21\31\0\3\21\1\0"+
    "\3\21\3\0\7\21\1\170\7\21\1\0\5\21\31\0"+
    "\3\21\1\0\3\21\3\0\17\21\1\0\2\21\1\171"+
    "\2\21\31\0\3\21\1\0\3\21\3\0\1\21\1\172"+
    "\11\21\1\173\3\21\1\0\4\21\1\174\31\0\3\21"+
    "\1\0\3\21\3\0\1\175\6\21\1\176\4\21\1\177"+
    "\2\21\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\1\21\1\200\15\21\1\0\5\21\31\0\3\21\1\0"+
    "\3\21\3\0\10\21\1\201\6\21\1\0\5\21\31\0"+
    "\3\21\1\0\3\21\3\0\4\21\1\202\12\21\1\0"+
    "\1\21\1\203\3\21\41\0\1\204\57\0\3\21\1\0"+
    "\3\21\3\0\12\21\1\205\4\21\1\0\1\21\1\206"+
    "\3\21\73\0\1\207\35\0\1\210\67\0\1\211\67\0"+
    "\1\212\67\0\1\213\67\0\1\214\53\0\1\73\71\0"+
    "\1\74\101\0\1\215\41\0\1\216\13\0\1\101\67\0"+
    "\1\104\67\0\1\105\101\0\1\217\41\0\1\220\13\0"+
    "\1\112\130\0\1\110\26\0\2\110\12\0\2\110\1\0"+
    "\2\110\6\0\1\110\2\0\1\110\6\0\2\110\11\0"+
    "\1\110\5\0\1\110\5\0\1\116\131\0\1\110\25\0"+
    "\2\110\12\0\2\110\1\0\2\110\6\0\1\110\2\0"+
    "\1\110\7\0\1\110\11\0\1\110\5\0\1\110\5\0"+
    "\1\124\65\0\1\125\74\0\1\150\1\0\1\221\1\150"+
    "\4\0\1\221\57\0\1\222\2\0\1\222\64\0\2\223"+
    "\1\0\1\223\1\0\1\223\3\0\1\223\1\0\2\223"+
    "\1\0\1\223\5\0\1\223\1\0\1\223\41\0\1\150"+
    "\2\0\1\150\72\0\1\224\1\225\56\0\1\226\11\0"+
    "\1\227\56\0\3\21\1\0\3\21\3\0\2\21\1\230"+
    "\14\21\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\16\21\1\231\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\10\21\1\232\6\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\5\21\1\233\11\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\16\21\1\234\1\0"+
    "\1\235\4\21\31\0\3\21\1\0\3\21\3\0\2\21"+
    "\1\236\14\21\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\11\21\1\237\5\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\17\21\1\0\1\240\4\21\31\0"+
    "\3\21\1\0\3\21\3\0\15\21\1\241\1\21\1\0"+
    "\5\21\31\0\3\21\1\0\3\21\3\0\12\21\1\242"+
    "\4\21\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\17\21\1\0\1\243\4\21\31\0\3\21\1\0\3\21"+
    "\3\0\10\21\1\244\6\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\4\21\1\245\12\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\1\21\1\246\15\21"+
    "\1\0\5\21\31\0\3\21\1\0\3\21\3\0\16\21"+
    "\1\247\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\1\250\16\21\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\14\21\1\251\2\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\5\21\1\252\11\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\16\21\1\253\1\0"+
    "\5\21\31\0\3\21\1\0\3\21\3\0\12\21\1\254"+
    "\4\21\1\0\5\21\32\0\1\222\1\144\1\0\1\222"+
    "\12\0\1\144\47\0\1\255\10\0\1\226\52\0\2\256"+
    "\1\257\1\260\12\256\1\227\51\256\5\0\3\21\1\0"+
    "\3\21\3\0\1\261\16\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\14\21\1\262\2\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\5\21\1\263\11\21"+
    "\1\0\5\21\31\0\3\21\1\0\3\21\3\0\5\21"+
    "\1\264\11\21\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\7\21\1\265\7\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\1\266\16\21\1\0\5\21\31\0"+
    "\3\21\1\0\3\21\3\0\16\21\1\267\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\7\21\1\270\7\21"+
    "\1\0\5\21\31\0\3\21\1\0\3\21\3\0\11\21"+
    "\1\271\5\21\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\15\21\1\272\1\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\12\21\1\273\4\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\11\21\1\274\5\21"+
    "\1\0\5\21\31\0\3\21\1\0\3\21\3\0\5\21"+
    "\1\275\11\21\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\1\21\1\276\15\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\17\21\1\0\1\21\1\277\3\21"+
    "\31\0\3\21\1\0\3\21\3\0\10\21\1\300\6\21"+
    "\1\0\5\21\24\0\2\256\1\257\1\260\64\256\1\0"+
    "\1\301\1\0\1\260\12\0\1\302\52\0\1\301\14\0"+
    "\1\302\56\0\3\21\1\0\3\21\3\0\6\21\1\303"+
    "\10\21\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\4\21\1\304\12\21\1\0\5\21\31\0\3\21\1\0"+
    "\3\21\3\0\1\305\16\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\12\21\1\306\4\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\4\21\1\307\12\21"+
    "\1\0\5\21\31\0\3\21\1\0\3\21\3\0\10\21"+
    "\1\310\6\21\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\15\21\1\311\1\21\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\4\21\1\312\12\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\5\21\1\313\11\21"+
    "\1\0\5\21\31\0\3\21\1\0\3\21\3\0\16\21"+
    "\1\314\1\0\5\21\31\0\3\21\1\0\3\21\3\0"+
    "\10\21\1\315\6\21\1\0\5\21\31\0\3\21\1\0"+
    "\3\21\3\0\11\21\1\316\5\21\1\0\5\21\31\0"+
    "\3\21\1\0\3\21\3\0\5\21\1\317\11\21\1\0"+
    "\5\21\42\0\1\320\56\0\3\21\1\0\3\21\3\0"+
    "\1\21\1\321\15\21\1\0\5\21\31\0\3\21\1\0"+
    "\3\21\3\0\16\21\1\322\1\0\5\21\31\0\3\21"+
    "\1\0\3\21\3\0\13\21\1\323\3\21\1\0\5\21"+
    "\31\0\3\21\1\0\3\21\3\0\16\21\1\324\1\0"+
    "\5\21\31\0\3\21\1\0\3\21\3\0\17\21\1\0"+
    "\1\21\1\325\3\21\31\0\3\21\1\0\3\21\3\0"+
    "\16\21\1\326\1\0\5\21\31\0\3\21\1\0\3\21"+
    "\3\0\12\21\1\327\4\21\1\0\5\21\24\0\2\256"+
    "\1\257\1\260\1\330\63\256\5\0\3\21\1\0\3\21"+
    "\3\0\7\21\1\331\7\21\1\0\5\21\26\0\1\257"+
    "\1\260\71\0\3\21\1\0\3\21\3\0\1\21\1\332"+
    "\15\21\1\0\5\21\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\2\1\1\11\30\1\2\11\6\1\13\11"+
    "\1\1\1\11\2\1\1\11\1\1\2\11\1\1\2\11"+
    "\2\1\1\11\1\1\1\11\3\1\1\11\2\1\2\11"+
    "\1\1\1\11\1\1\15\11\2\0\1\1\1\11\1\0"+
    "\2\1\3\11\27\1\1\11\2\1\6\11\1\0\1\11"+
    "\1\0\1\11\1\0\2\1\2\11\1\0\26\1\1\11"+
    "\1\0\22\1\2\0\15\1\1\0\7\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    ExtendedSyntaxStrCommentHandler longCommentOrStringHandler = new ExtendedSyntaxStrCommentHandler();

    int current_line_indent = 0;
    int indent_level = 0;

    private final Stack<Integer> stack = new Stack<Integer>();

  /**
   * Push the actual state on top of the stack
   */
  private void pushState() {
    stack.push(yystate());
  }

  /**
   * Push the actual state on top of the stack
   * and change into another state
   *
   * @param state The new state
   */
  private void pushStateAndBegin(int state) {
    stack.push(yystate());
    yybegin(state);
  }

  /**
   * Pop the last state from the stack and change to it.
   * If the stack is empty, go to YYINITIAL
   */
  private void popState() {
    if (!stack.empty()) {
      yybegin(stack.pop());
    } else {
      yybegin(YYINITIAL);
    }
  }

  /**
   * Push the stream back to the position before the text match
   *
   * @param text The text to match
   * @return true when matched
   */
  private boolean pushBackTo(String text) {
    final int position = yytext().toString().indexOf(text);

    if (position != -1) {
      yypushback(yylength() - position);
      return true;
    }

    return false;
  }

  /**
   * Push the stream back to the position before the text match
   * and change into the given state
   *
   * @param text The text to match
   * @param state The new state
   * @return true when matched
   */
  private boolean pushBackAndState(String text, int state) {
    final boolean success = pushBackTo(text);

    if (success) {
      pushStateAndBegin(state);
    }

    return success;
  }


  _MoonLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _MoonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [386] { yybegin(YYINITIAL); return WS; }");
          { yybegin(YYINITIAL); return WS;
          }
        case 95: break;
        case 19: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [220] { return LPAREN; }");
          { return LPAREN;
          }
        case 96: break;
        case 65: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [203] { return GE; }");
          { return GE;
          }
        case 97: break;
        case 28: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [234] { return SELF; }");
          { return SELF;
          }
        case 98: break;
        case 72: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [145] { return AND; }");
          { return AND;
          }
        case 99: break;
        case 48: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [382] { yybegin(YYINITIAL);"+ZZ_NL+"                                return FUNCTION; }");
          { yybegin(YYINITIAL);
                                return FUNCTION;
          }
        case 100: break;
        case 66: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [188] { yybegin( XSHORTCOMMENT ); return SHEBANG; }");
          { yybegin( XSHORTCOMMENT ); return SHEBANG;
          }
        case 101: break;
        case 88: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [168] { return WHILE; }");
          { return WHILE;
          }
        case 102: break;
        case 84: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [159] { return LOCAL; }");
          { return LOCAL;
          }
        case 103: break;
        case 80: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [166] { return TRUE; }");
          { return TRUE;
          }
        case 104: break;
        case 30: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [314] { return LONGSTRING; }");
          { return LONGSTRING;
          }
        case 105: break;
        case 23: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [225] { return RCURLY; }");
          { return RCURLY;
          }
        case 106: break;
        case 60: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [180] { yypushback(yytext().length()); yybegin( XSHORTCOMMENT ); return advance(); }");
          { yypushback(yytext().length()); yybegin( XSHORTCOMMENT ); return advance();
          }
        case 107: break;
        case 56: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [182] { longCommentOrStringHandler.setCurrentExtQuoteStart(yytext().toString()); yybegin( XLONGSTRING_BEGIN ); return LONGSTRING_BEGIN; }");
          { longCommentOrStringHandler.setCurrentExtQuoteStart(yytext().toString()); yybegin( XLONGSTRING_BEGIN ); return LONGSTRING_BEGIN;
          }
        case 108: break;
        case 91: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [149] { return ELSEIF; }");
          { return ELSEIF;
          }
        case 109: break;
        case 55: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [347] { yybegin(YYINITIAL);"+ZZ_NL+"                                return COLON; }");
          { yybegin(YYINITIAL);
                                return COLON;
          }
        case 110: break;
        case 31: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [300] { yypushback(1); yybegin(XLONGSTRING); return advance(); }");
          { yypushback(1); yybegin(XLONGSTRING); return advance();
          }
        case 111: break;
        case 26: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [229] { return COLON; }");
          { return COLON;
          }
        case 112: break;
        case 83: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [146] { return BREAK; }");
          { return BREAK;
          }
        case 113: break;
        case 92: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [170] { return EXPORT; }");
          { return EXPORT;
          }
        case 114: break;
        case 1: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [418] { stack.clear();"+ZZ_NL+"                                yybegin(YYINITIAL);"+ZZ_NL+"                                return WRONG; }");
          { stack.clear();
                                yybegin(YYINITIAL);
                                return WRONG;
          }
        case 115: break;
        case 58: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [202] { return EQ; }");
          { return EQ;
          }
        case 116: break;
        case 90: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [163] { return REPEAT; }");
          { return REPEAT;
          }
        case 117: break;
        case 75: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [150] { return END; }");
          { return END;
          }
        case 118: break;
        case 34: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [319] { yybegin(YYINITIAL); return NEWLINE; }");
          { yybegin(YYINITIAL); return NEWLINE;
          }
        case 119: break;
        case 22: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [224] { return LCURLY; }");
          { return LCURLY;
          }
        case 120: break;
        case 13: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [185] { yybegin(XSTRINGA); return STRING; }");
          { yybegin(XSTRINGA); return STRING;
          }
        case 121: break;
        case 74: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [160] { return NIL; }");
          { return NIL;
          }
        case 122: break;
        case 89: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [164] { return RETURN; }");
          { return RETURN;
          }
        case 123: break;
        case 2: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [237] { return WS; }");
          { return WS;
          }
        case 124: break;
        case 78: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [177] { yypushback(1); /* TODO: Only pushback a newline */  return LUADOC_COMMENT; }");
          { yypushback(1); /* TODO: Only pushback a newline */  return LUADOC_COMMENT;
          }
        case 125: break;
        case 54: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [355] { yybegin(YYINITIAL);"+ZZ_NL+"                                return COMMA; }");
          { yybegin(YYINITIAL);
                                return COMMA;
          }
        case 126: break;
        case 37: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [277] { yybegin(YYINITIAL); return WRONG; }");
          { yybegin(YYINITIAL); return WRONG;
          }
        case 127: break;
        case 24: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [227] { return COMMA; }");
          { return COMMA;
          }
        case 128: break;
        case 16: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [211] { return MULT; }");
          { return MULT;
          }
        case 129: break;
        case 17: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [213] { return MOD; }");
          { return MOD;
          }
        case 130: break;
        case 42: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [246] { current_line_indent = 0; /*ignoring blank line */ }");
          { current_line_indent = 0; /*ignoring blank line */
          }
        case 131: break;
        case 39: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [292] { yybegin(YYINITIAL);return WRONG; }");
          { yybegin(YYINITIAL);return WRONG;
          }
        case 132: break;
        case 18: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [215] { return DIV; }");
          { return DIV;
          }
        case 133: break;
        case 70: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [326] { if (longCommentOrStringHandler.isCurrentExtQuoteStart(yytext())) {"+ZZ_NL+"                       yybegin(YYINITIAL); longCommentOrStringHandler.resetCurrentExtQuoteStart(); return LONGCOMMENT_END;"+ZZ_NL+"                    }  else { yypushback(yytext().length()-1); }"+ZZ_NL+"                  return LONGCOMMENT; }");
          { if (longCommentOrStringHandler.isCurrentExtQuoteStart(yytext())) {
                       yybegin(YYINITIAL); longCommentOrStringHandler.resetCurrentExtQuoteStart(); return LONGCOMMENT_END;
                    }  else { yypushback(yytext().length()-1); }
                  return LONGCOMMENT;
          }
        case 134: break;
        case 7: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [209] { return PLUS; }");
          { return PLUS;
          }
        case 135: break;
        case 35: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [334] { return LONGCOMMENT; }");
          { return LONGCOMMENT;
          }
        case 136: break;
        case 33: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [321] { return SHORTCOMMENT; }");
          { return SHORTCOMMENT;
          }
        case 137: break;
        case 40: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [247] { //                   unput(*yytext);"+ZZ_NL+"                   yypushback(yylength());"+ZZ_NL+"                    System.out.println(current_line_indent + \" \" + indent_level);"+ZZ_NL+"                   if (current_line_indent > indent_level) {"+ZZ_NL+"                       indent_level++;"+ZZ_NL+"                       return INDENT;"+ZZ_NL+"                   } else if (current_line_indent < indent_level) {"+ZZ_NL+"                       indent_level--;"+ZZ_NL+"                       return UNINDENT;"+ZZ_NL+"                   }"+ZZ_NL+"                   else {"+ZZ_NL+"                   //    BEGIN normal;"+ZZ_NL+"                         yybegin(YYINITIAL);"+ZZ_NL+"                   } }");
          { //                   unput(*yytext);
                   yypushback(yylength());
                    System.out.println(current_line_indent + " " + indent_level);
                   if (current_line_indent > indent_level) {
                       indent_level++;
                       return INDENT;
                   } else if (current_line_indent < indent_level) {
                       indent_level--;
                       return UNINDENT;
                   }
                   else {
                   //    BEGIN normal;
                         yybegin(YYINITIAL);
                   }
          }
        case 138: break;
        case 38: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [269] { yybegin(YYINITIAL); return STRING; }");
          { yybegin(YYINITIAL); return STRING;
          }
        case 139: break;
        case 15: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [219] { return LT; }");
          { return LT;
          }
        case 140: break;
        case 93: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [173] { return SWITCH; }");
          { return SWITCH;
          }
        case 141: break;
        case 87: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [156] { return CLASS; }");
          { return CLASS;
          }
        case 142: break;
        case 49: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [373] { yybegin(YYINITIAL);"+ZZ_NL+"                                return MULT; }");
          { yybegin(YYINITIAL);
                                return MULT;
          }
        case 143: break;
        case 53: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [361] { yybegin(YYINITIAL);"+ZZ_NL+"                                return RBRACK; }");
          { yybegin(YYINITIAL);
                                return RBRACK;
          }
        case 144: break;
        case 8: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [230] { return DOT; }");
          { return DOT;
          }
        case 145: break;
        case 61: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [147] { return DO; }");
          { return DO;
          }
        case 146: break;
        case 63: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [158] { return IN; }");
          { return IN;
          }
        case 147: break;
        case 25: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [228] { return SEMI; }");
          { return SEMI;
          }
        case 148: break;
        case 45: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [367] { yybegin(YYINITIAL);"+ZZ_NL+"                                return PLUS; }");
          { yybegin(YYINITIAL);
                                return PLUS;
          }
        case 149: break;
        case 85: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [151] { return FALSE; }");
          { return FALSE;
          }
        case 150: break;
        case 5: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [193] { yybegin(YYNAME);"+ZZ_NL+"                    return NAME; }");
          { yybegin(YYNAME);
                    return NAME;
          }
        case 151: break;
        case 11: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [218] { return GT; }");
          { return GT;
          }
        case 152: break;
        case 29: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [191] { current_line_indent = 0; yybegin(XINDENT); }");
          { current_line_indent = 0; yybegin(XINDENT);
          }
        case 153: break;
        case 21: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [223] { return RBRACK; }");
          { return RBRACK;
          }
        case 154: break;
        case 44: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [358] { yybegin(YYINITIAL);"+ZZ_NL+"                                return LBRACK; }");
          { yybegin(YYINITIAL);
                                return LBRACK;
          }
        case 155: break;
        case 62: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [162] { return OR; }");
          { return OR;
          }
        case 156: break;
        case 57: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [200] { return CONCAT; }");
          { return CONCAT;
          }
        case 157: break;
        case 9: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [217] { return ASSIGN; }");
          { return ASSIGN;
          }
        case 158: break;
        case 3: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [236] { return NEWLINE; }");
          { return NEWLINE;
          }
        case 159: break;
        case 4: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [222] { return LBRACK; }");
          { return LBRACK;
          }
        case 160: break;
        case 71: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [199] { return ELLIPSIS; }");
          { return ELLIPSIS;
          }
        case 161: break;
        case 14: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [226] { return GETN; }");
          { return GETN;
          }
        case 162: break;
        case 69: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [306] { if (longCommentOrStringHandler.isCurrentExtQuoteStart(yytext())) {"+ZZ_NL+"                       yybegin(YYINITIAL); longCommentOrStringHandler.resetCurrentExtQuoteStart(); return LONGSTRING_END;"+ZZ_NL+"                    } else { yypushback(yytext().length()-1); }"+ZZ_NL+"                    return LONGSTRING; }");
          { if (longCommentOrStringHandler.isCurrentExtQuoteStart(yytext())) {
                       yybegin(YYINITIAL); longCommentOrStringHandler.resetCurrentExtQuoteStart(); return LONGSTRING_END;
                    } else { yypushback(yytext().length()-1); }
                    return LONGSTRING;
          }
        case 163: break;
        case 59: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [155] { return FUNCTION; }");
          { return FUNCTION;
          }
        case 164: break;
        case 73: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [161] { return NOT; }");
          { return NOT;
          }
        case 165: break;
        case 6: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [196] { yybegin(YYNUMBER);"+ZZ_NL+"                   return NUMBER; }");
          { yybegin(YYNUMBER);
                   return NUMBER;
          }
        case 166: break;
        case 94: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [171] { return IMPORT; }");
          { return IMPORT;
          }
        case 167: break;
        case 52: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [364] { yybegin(YYINITIAL);"+ZZ_NL+"                                return RPAREN; }");
          { yybegin(YYINITIAL);
                                return RPAREN;
          }
        case 168: break;
        case 79: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [148] { return ELSE; }");
          { return ELSE;
          }
        case 169: break;
        case 50: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [376] { yybegin(YYINITIAL);"+ZZ_NL+"                                return MOD; }");
          { yybegin(YYINITIAL);
                                return MOD;
          }
        case 170: break;
        case 36: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [278] { return STRING; }");
          { return STRING;
          }
        case 171: break;
        case 64: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [157] { return IF; }");
          { return IF;
          }
        case 172: break;
        case 82: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [172] { return WITH; }");
          { return WITH;
          }
        case 173: break;
        case 67: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [206] { return NE; }");
          { return NE;
          }
        case 174: break;
        case 51: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [379] { yybegin(YYINITIAL);"+ZZ_NL+"                                return DIV; }");
          { yybegin(YYINITIAL);
                                return DIV;
          }
        case 175: break;
        case 81: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [165] { return THEN; }");
          { return THEN;
          }
        case 176: break;
        case 86: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [167] { return UNTIL; }");
          { return UNTIL;
          }
        case 177: break;
        case 47: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [370] { yybegin(YYINITIAL);"+ZZ_NL+"                                return MINUS; }");
          { yybegin(YYINITIAL);
                                return MINUS;
          }
        case 178: break;
        case 10: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [207] { return MINUS; }");
          { return MINUS;
          }
        case 179: break;
        case 76: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [152] { return FOR; }");
          { return FOR;
          }
        case 180: break;
        case 68: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [204] { return LE; }");
          { return LE;
          }
        case 181: break;
        case 32: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [299] { return NL_BEFORE_LONGSTRING; }");
          { return NL_BEFORE_LONGSTRING;
          }
        case 182: break;
        case 27: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [232] { return EXP; }");
          { return EXP;
          }
        case 183: break;
        case 20: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [221] { return RPAREN; }");
          { return RPAREN;
          }
        case 184: break;
        case 77: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [179] { longCommentOrStringHandler.setCurrentExtQuoteStart(yytext().toString()); yybegin( XLONGCOMMENT ); return LONGCOMMENT_BEGIN; }");
          { longCommentOrStringHandler.setCurrentExtQuoteStart(yytext().toString()); yybegin( XLONGCOMMENT ); return LONGCOMMENT_BEGIN;
          }
        case 185: break;
        case 41: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [244] { current_line_indent++; }");
          { current_line_indent++;
          }
        case 186: break;
        case 12: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [184] { yybegin(XSTRINGQ);  return STRING; }");
          { yybegin(XSTRINGQ);  return STRING;
          }
        case 187: break;
        case 46: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [344] { yybegin(YYINITIAL);"+ZZ_NL+"                                return DOT; }");
          { yybegin(YYINITIAL);
                                return DOT;
          }
        case 188: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _MoonLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        _MoonLexer scanner = null;
        try {
          scanner = new _MoonLexer( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
